openapi: 3.0.2
info:
  title: 'Common Ground Registratie Component'
  version: V.0.1
  description: |
    API Details
    - Component: Common Ground Registratie Component
    - Reference: cgrc
    - Enviroment: dev
    - Version: V.0.1
    - Repository: [online](https://github.com/ConductionNL/Proto-component-commonground) / [zip](https://github.com/ConductionNL/Proto-component-commonground/archive/master.zip)
    - Docker Image: [online](https://hub.docker.com/repository/docker/conduction/cgrc-php) 
    - Datamodel: [postman](/schema/cgrc.postman_collection.json) / [oas](/schema/openapi.yaml) / [pdf](/schema/datamodel.pdf) / [mwb](/schema/datamodel.mwb) 
    
    'Naast deze JSON rest API is er ook een [graphql](/graphql) interface beschikbaar.'         
    
paths:
  /a_p_is:
    get:
      tags:
        - API
      operationId: getAPICollection
      summary: 'Retrieves the collection of API resources.'
      responses:
        200:
          description: 'API collection response'
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/API-read'
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/API:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/vnd.api+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/API-read'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/API-read'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/API-read'
            application/x-yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/API-read'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/API-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/API-read'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
        -
          name: Link
          description: 'A [websub](https://www.w3.org/TR/websub/#discovery) header like <https://hub.example.com/>; rel="hub"'
          in: header
        -
          name: 'extend[]'
          required: false
          description: 'An array of nested objects to include in the return object'
          in: query
          schema:
            type: array
        -
          name: 'fields[]'
          required: false
          description: 'An array of fields to return in output, wil return all fields is not supplied'
          in: query
          schema:
            type: array
        -
          name: validOn
          required: false
          description: 'Returns object as valid on a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validFrom
          required: false
          description: 'Returns objects valid from a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validUntil
          required: false
          description: 'Returns objects valid until a given date time'
          schema:
            type: string
            format: date-time
          in: query
      produces:
        - application/health+json
  '/a_p_is/{id}':
    get:
      tags:
        - API
      operationId: getAPIItem
      summary: 'Retrieves a API resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
        -
          name: Link
          description: 'A [websub](https://www.w3.org/TR/websub/#discovery) header like <https://hub.example.com/>; rel="hub"'
          in: header
        -
          name: 'extend[]'
          required: false
          description: 'An array of nested objects to include in the return object'
          in: query
          schema:
            type: array
        -
          name: 'fields[]'
          required: false
          description: 'An array of fields to return in output, wil return all fields is not supplied'
          in: query
          schema:
            type: array
        -
          name: validOn
          required: false
          description: 'Returns object as valid on a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validFrom
          required: false
          description: 'Returns objects valid from a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validUntil
          required: false
          description: 'Returns objects valid until a given date time'
          schema:
            type: string
            format: date-time
          in: query
      responses:
        200:
          description: 'API resource response'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/API-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/API:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/API-read'
            application/json:
              schema:
                $ref: '#/components/schemas/API-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/API-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/API-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/API-read'
            text/html:
              schema:
                $ref: '#/components/schemas/API-read'
        404:
          description: 'Resource not found'
      produces:
        - application/health+json
  /add:
    post:
      tags:
        - Component
      operationId: addComponentCollection
      summary: 'Creates a Component resource.'
      responses:
        204:
          description: 'Component resource created'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/Component-write'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Component:jsonld-write'
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Component-write'
          application/json:
            schema:
              $ref: '#/components/schemas/Component-write'
          application/xml:
            schema:
              $ref: '#/components/schemas/Component-write'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/Component-write'
          text/csv:
            schema:
              $ref: '#/components/schemas/Component-write'
          text/html:
            schema:
              $ref: '#/components/schemas/Component-write'
        description: 'The new Component resource'
      parameters:
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
  '/apis/{id}/refresh':
    post:
      tags:
        - API
      operationId: refreshAPIItem
      summary: 'Creates a API resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
      responses:
        201:
          description: 'API resource created'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/API-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/API:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/API-read'
            application/json:
              schema:
                $ref: '#/components/schemas/API-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/API-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/API-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/API-read'
            text/html:
              schema:
                $ref: '#/components/schemas/API-read'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/API-write'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/API:jsonld-write'
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/API-write'
          application/json:
            schema:
              $ref: '#/components/schemas/API-write'
          application/xml:
            schema:
              $ref: '#/components/schemas/API-write'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/API-write'
          text/csv:
            schema:
              $ref: '#/components/schemas/API-write'
          text/html:
            schema:
              $ref: '#/components/schemas/API-write'
        description: 'The new API resource'
  /component_files:
    get:
      tags:
        - ComponentFile
      operationId: getComponentFileCollection
      summary: 'Retrieves the collection of ComponentFile resources.'
      responses:
        200:
          description: 'ComponentFile collection response'
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentFile-read'
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/ComponentFile:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/vnd.api+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentFile-read'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentFile-read'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentFile-read'
            application/x-yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentFile-read'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentFile-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentFile-read'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
        -
          name: Link
          description: 'A [websub](https://www.w3.org/TR/websub/#discovery) header like <https://hub.example.com/>; rel="hub"'
          in: header
        -
          name: 'extend[]'
          required: false
          description: 'An array of nested objects to include in the return object'
          in: query
          schema:
            type: array
        -
          name: 'fields[]'
          required: false
          description: 'An array of fields to return in output, wil return all fields is not supplied'
          in: query
          schema:
            type: array
        -
          name: validOn
          required: false
          description: 'Returns object as valid on a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validFrom
          required: false
          description: 'Returns objects valid from a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validUntil
          required: false
          description: 'Returns objects valid until a given date time'
          schema:
            type: string
            format: date-time
          in: query
      produces:
        - application/health+json
    post:
      tags:
        - ComponentFile
      operationId: postComponentFileCollection
      summary: 'Creates a ComponentFile resource.'
      responses:
        201:
          description: 'ComponentFile resource created'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ComponentFile:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            text/html:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
          links:
            GetComponentFileItem:
              parameters:
                id: '$response.body#/id'
              operationId: getComponentFileItem
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /component_files/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/ComponentFile:jsonld-write'
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          application/xml:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          text/csv:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          text/html:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
        description: 'The new ComponentFile resource'
      parameters:
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
  '/component_files/{id}':
    get:
      tags:
        - ComponentFile
      operationId: getComponentFileItem
      summary: 'Retrieves a ComponentFile resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
        -
          name: Link
          description: 'A [websub](https://www.w3.org/TR/websub/#discovery) header like <https://hub.example.com/>; rel="hub"'
          in: header
        -
          name: 'extend[]'
          required: false
          description: 'An array of nested objects to include in the return object'
          in: query
          schema:
            type: array
        -
          name: 'fields[]'
          required: false
          description: 'An array of fields to return in output, wil return all fields is not supplied'
          in: query
          schema:
            type: array
        -
          name: validOn
          required: false
          description: 'Returns object as valid on a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validFrom
          required: false
          description: 'Returns objects valid from a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validUntil
          required: false
          description: 'Returns objects valid until a given date time'
          schema:
            type: string
            format: date-time
          in: query
      responses:
        200:
          description: 'ComponentFile resource response'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ComponentFile:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            text/html:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
        404:
          description: 'Resource not found'
      produces:
        - application/health+json
    delete:
      tags:
        - ComponentFile
      operationId: deleteComponentFileItem
      summary: 'Removes the ComponentFile resource.'
      responses:
        204:
          description: 'ComponentFile resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
    put:
      tags:
        - ComponentFile
      operationId: putComponentFileItem
      summary: 'Replaces the ComponentFile resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
      responses:
        200:
          description: 'ComponentFile resource updated'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ComponentFile:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            text/html:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/ComponentFile:jsonld-write'
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          application/xml:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          text/csv:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
          text/html:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
        description: 'The updated ComponentFile resource'
    patch:
      tags:
        - ComponentFile
      operationId: patchComponentFileItem
      summary: 'Updates the ComponentFile resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
      responses:
        200:
          description: 'ComponentFile resource updated'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ComponentFile:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
            text/html:
              schema:
                $ref: '#/components/schemas/ComponentFile-read'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/ComponentFile-write'
        description: 'The updated ComponentFile resource'
  /components:
    get:
      tags:
        - Component
      operationId: getComponentCollection
      summary: 'Retrieves the collection of Component resources.'
      responses:
        200:
          description: 'Component collection response'
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component-read'
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Component:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/vnd.api+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component-read'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component-read'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component-read'
            application/x-yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component-read'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Component-read'
      parameters:
        -
          name: name
          in: query
          required: false
          schema:
            type: string
        -
          name: 'name[]'
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        -
          name: description
          in: query
          required: false
          schema:
            type: string
        -
          name: commonground
          in: query
          required: false
          schema:
            type: boolean
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
        -
          name: Link
          description: 'A [websub](https://www.w3.org/TR/websub/#discovery) header like <https://hub.example.com/>; rel="hub"'
          in: header
        -
          name: 'extend[]'
          required: false
          description: 'An array of nested objects to include in the return object'
          in: query
          schema:
            type: array
        -
          name: 'fields[]'
          required: false
          description: 'An array of fields to return in output, wil return all fields is not supplied'
          in: query
          schema:
            type: array
        -
          name: validOn
          required: false
          description: 'Returns object as valid on a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validFrom
          required: false
          description: 'Returns objects valid from a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validUntil
          required: false
          description: 'Returns objects valid until a given date time'
          schema:
            type: string
            format: date-time
          in: query
      produces:
        - application/health+json
  '/components/{id}':
    get:
      tags:
        - Component
      operationId: getComponentItem
      summary: 'Retrieves a Component resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
        -
          name: Link
          description: 'A [websub](https://www.w3.org/TR/websub/#discovery) header like <https://hub.example.com/>; rel="hub"'
          in: header
        -
          name: 'extend[]'
          required: false
          description: 'An array of nested objects to include in the return object'
          in: query
          schema:
            type: array
        -
          name: 'fields[]'
          required: false
          description: 'An array of fields to return in output, wil return all fields is not supplied'
          in: query
          schema:
            type: array
        -
          name: validOn
          required: false
          description: 'Returns object as valid on a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validFrom
          required: false
          description: 'Returns objects valid from a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validUntil
          required: false
          description: 'Returns objects valid until a given date time'
          schema:
            type: string
            format: date-time
          in: query
      responses:
        200:
          description: 'Component resource response'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Component-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Component:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Component-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Component-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/Component-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/Component-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/Component-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Component-read'
        404:
          description: 'Resource not found'
      produces:
        - application/health+json
  '/components/{id}/refresh':
    post:
      tags:
        - Component
      operationId: refreshComponentItem
      summary: 'Creates a Component resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
      responses:
        201:
          description: 'Component resource created'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Component-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Component:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Component-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Component-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/Component-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/Component-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/Component-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Component-read'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/Component-write'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Component:jsonld-write'
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Component-write'
          application/json:
            schema:
              $ref: '#/components/schemas/Component-write'
          application/xml:
            schema:
              $ref: '#/components/schemas/Component-write'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/Component-write'
          text/csv:
            schema:
              $ref: '#/components/schemas/Component-write'
          text/html:
            schema:
              $ref: '#/components/schemas/Component-write'
        description: 'The new Component resource'
  /example_entities:
    get:
      tags:
        - ExampleEntity
      operationId: getExampleEntityCollection
      summary: 'Retrieves the collection of ExampleEntity resources.'
      responses:
        200:
          description: 'ExampleEntity collection response'
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExampleEntity-read'
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/ExampleEntity:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/vnd.api+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExampleEntity-read'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExampleEntity-read'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExampleEntity-read'
            application/x-yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExampleEntity-read'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExampleEntity-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExampleEntity-read'
      parameters:
        -
          name: like_name
          in: query
          required: false
          schema:
            type: string
        -
          name: like_description
          in: query
          required: false
          schema:
            type: string
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
        -
          name: Link
          description: 'A [websub](https://www.w3.org/TR/websub/#discovery) header like <https://hub.example.com/>; rel="hub"'
          in: header
        -
          name: 'extend[]'
          required: false
          description: 'An array of nested objects to include in the return object'
          in: query
          schema:
            type: array
        -
          name: 'fields[]'
          required: false
          description: 'An array of fields to return in output, wil return all fields is not supplied'
          in: query
          schema:
            type: array
        -
          name: validOn
          required: false
          description: 'Returns object as valid on a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validFrom
          required: false
          description: 'Returns objects valid from a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validUntil
          required: false
          description: 'Returns objects valid until a given date time'
          schema:
            type: string
            format: date-time
          in: query
      produces:
        - application/health+json
    post:
      tags:
        - ExampleEntity
      operationId: postExampleEntityCollection
      summary: 'Creates a ExampleEntity resource.'
      responses:
        201:
          description: 'ExampleEntity resource created'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ExampleEntity:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            text/html:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
          links:
            GetExampleEntityItem:
              parameters:
                id: '$response.body#/id'
              operationId: getExampleEntityItem
              description: 'The `id` value returned in the response can be used as the `id` parameter in `GET /example_entities/{id}`.'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/ExampleEntity:jsonld-write'
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          application/json:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          application/xml:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          text/csv:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          text/html:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
        description: 'The new ExampleEntity resource'
      parameters:
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
  '/example_entities/{id}':
    get:
      tags:
        - ExampleEntity
      operationId: audittrailExampleEntityItem
      summary: 'Retrieves a ExampleEntity resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
        -
          name: Link
          description: 'A [websub](https://www.w3.org/TR/websub/#discovery) header like <https://hub.example.com/>; rel="hub"'
          in: header
        -
          name: 'extend[]'
          required: false
          description: 'An array of nested objects to include in the return object'
          in: query
          schema:
            type: array
        -
          name: 'fields[]'
          required: false
          description: 'An array of fields to return in output, wil return all fields is not supplied'
          in: query
          schema:
            type: array
        -
          name: validOn
          required: false
          description: 'Returns object as valid on a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validFrom
          required: false
          description: 'Returns objects valid from a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validUntil
          required: false
          description: 'Returns objects valid until a given date time'
          schema:
            type: string
            format: date-time
          in: query
      responses:
        200:
          description: 'ExampleEntity resource response'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ExampleEntity:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            text/html:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
        404:
          description: 'Resource not found'
      produces:
        - application/health+json
    put:
      tags:
        - ExampleEntity
      operationId: putExampleEntityItem
      summary: 'Replaces the ExampleEntity resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
      responses:
        200:
          description: 'ExampleEntity resource updated'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/ExampleEntity:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/json:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
            text/html:
              schema:
                $ref: '#/components/schemas/ExampleEntity-read'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/ExampleEntity:jsonld-write'
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          application/json:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          application/xml:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          text/csv:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
          text/html:
            schema:
              $ref: '#/components/schemas/ExampleEntity-write'
        description: 'The updated ExampleEntity resource'
    delete:
      tags:
        - ExampleEntity
      operationId: deleteExampleEntityItem
      summary: 'Removes the ExampleEntity resource.'
      responses:
        204:
          description: 'ExampleEntity resource deleted'
        404:
          description: 'Resource not found'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
  '/organisation/{id}/refresh':
    post:
      tags:
        - Organisation
      operationId: refreshOrganisationItem
      summary: 'Creates a Organisation resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
      responses:
        201:
          description: 'Organisation resource created'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Organisation:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Organisation-read'
        400:
          description: 'Invalid input'
        404:
          description: 'Resource not found'
      requestBody:
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/Organisation-write'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Organisation:jsonld-write'
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/Organisation-write'
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation-write'
          application/xml:
            schema:
              $ref: '#/components/schemas/Organisation-write'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/Organisation-write'
          text/csv:
            schema:
              $ref: '#/components/schemas/Organisation-write'
          text/html:
            schema:
              $ref: '#/components/schemas/Organisation-write'
        description: 'The new Organisation resource'
  /organisations:
    get:
      tags:
        - Organisation
      operationId: getOrganisationCollection
      summary: 'Retrieves the collection of Organisation resources.'
      responses:
        200:
          description: 'Organisation collection response'
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation-read'
            application/ld+json:
              schema:
                type: object
                properties:
                  'hydra:member': { type: array, items: { $ref: '#/components/schemas/Organisation:jsonld-read' } }
                  'hydra:totalItems': { type: integer, minimum: 0 }
                  'hydra:view': { type: object, properties: { '@id': { type: string, format: iri-reference }, '@type': { type: string }, 'hydra:first': { type: string, format: iri-reference }, 'hydra:last': { type: string, format: iri-reference }, 'hydra:next': { type: string, format: iri-reference } } }
                  'hydra:search': { type: object, properties: { '@type': { type: string }, 'hydra:template': { type: string }, 'hydra:variableRepresentation': { type: string }, 'hydra:mapping': { type: array, items: { type: object, properties: { '@type': { type: string }, variable: { type: string }, property: { type: string }, required: { type: boolean } } } } } }
                required:
                  - 'hydra:member'
            application/vnd.api+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation-read'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation-read'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation-read'
            application/x-yaml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation-read'
            text/csv:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation-read'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation-read'
      parameters:
        -
          name: page
          in: query
          required: false
          description: 'The collection page number'
          schema:
            type: integer
            default: 1
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
        -
          name: Link
          description: 'A [websub](https://www.w3.org/TR/websub/#discovery) header like <https://hub.example.com/>; rel="hub"'
          in: header
        -
          name: 'extend[]'
          required: false
          description: 'An array of nested objects to include in the return object'
          in: query
          schema:
            type: array
        -
          name: 'fields[]'
          required: false
          description: 'An array of fields to return in output, wil return all fields is not supplied'
          in: query
          schema:
            type: array
        -
          name: validOn
          required: false
          description: 'Returns object as valid on a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validFrom
          required: false
          description: 'Returns objects valid from a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validUntil
          required: false
          description: 'Returns objects valid until a given date time'
          schema:
            type: string
            format: date-time
          in: query
      produces:
        - application/health+json
  '/organisations/{id}':
    get:
      tags:
        - Organisation
      operationId: getOrganisationItem
      summary: 'Retrieves a Organisation resource.'
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
        -
          name: Authorization
          description: 'The JWT of the entity performing the request'
          in: header
        -
          name: API-Version
          description: 'The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)'
          example: 1.0.1
          in: header
        -
          name: X-NLX-Logrecord-ID
          description: 'A  globally unique id of the request, which makes a request traceable throughout the network.'
          in: header
        -
          name: X-NLX-Request-Process-Id
          description: 'A process id for purpose registration (doelbinding)'
          in: header
        -
          name: X-NLX-Request-Data-Elements
          description: 'A list of requested data elements'
          in: header
        -
          name: X-NLX-Request-Data-Subject
          description: 'A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`'
          in: header
        -
          name: X-NLX-Audit-Clarification
          description: 'A clarification as to why a request has been made  (doelbinding)'
          in: header
        -
          name: Link
          description: 'A [websub](https://www.w3.org/TR/websub/#discovery) header like <https://hub.example.com/>; rel="hub"'
          in: header
        -
          name: 'extend[]'
          required: false
          description: 'An array of nested objects to include in the return object'
          in: query
          schema:
            type: array
        -
          name: 'fields[]'
          required: false
          description: 'An array of fields to return in output, wil return all fields is not supplied'
          in: query
          schema:
            type: array
        -
          name: validOn
          required: false
          description: 'Returns object as valid on a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validFrom
          required: false
          description: 'Returns objects valid from a given date time'
          schema:
            type: string
            format: date-time
          in: query
        -
          name: validUntil
          required: false
          description: 'Returns objects valid until a given date time'
          schema:
            type: string
            format: date-time
          in: query
      responses:
        200:
          description: 'Organisation resource response'
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Organisation:jsonld-read'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            application/xml:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            application/x-yaml:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            text/csv:
              schema:
                $ref: '#/components/schemas/Organisation-read'
            text/html:
              schema:
                $ref: '#/components/schemas/Organisation-read'
        404:
          description: 'Resource not found'
      produces:
        - application/health+json
components:
  schemas:
    API-read:
      type: object
      description: 'An API.'
      properties:
        id:
          readOnly: true
          description: 'The UUID identifier of this object'
          externalDocs:
            url: 'http://schema.org/identifier'
          type: string
        name:
          description: 'The name of this API'
          type: string
        description:
          description: 'An short description of this API'
          externalDocs:
            url: 'https://schema.org/description'
          type: string
        version:
          description: 'The current production version of this component'
          type: string
        logo:
          description: 'The logo for this component'
          externalDocs:
            url: 'https://schema.org/logo'
          type: string
        slug:
          description: 'The slug for this api'
          type: string
        endpoint:
          description: 'The location where api calls should be directed to'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        documentation:
          description: 'The location of the open api documentation of this api'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        component:
          description: 'The common ground component that this api provides'
          $ref: '#/components/schemas/Component-read'
        organisations:
          description: 'The organisations that provide this api'
          type: array
          items:
            $ref: '#/components/schemas/Organisation-read'
      required:
        - name
        - endpoint
    API-write:
      type: object
      description: 'An API.'
      required:
        - name
        - endpoint
      properties:
        name:
          description: 'The name of this API'
          type: string
        description:
          description: 'An short description of this API'
          externalDocs:
            url: 'https://schema.org/description'
          type: string
        version:
          description: 'The current production version of this component'
          type: string
        logo:
          description: 'The logo for this component'
          externalDocs:
            url: 'https://schema.org/logo'
          type: string
        slug:
          description: 'The slug for this api'
          type: string
        endpoint:
          description: 'The location where api calls should be directed to'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        documentation:
          description: 'The location of the open api documentation of this api'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        component:
          description: 'The common ground component that this api provides'
          $ref: '#/components/schemas/Component-write'
        organisations:
          description: 'The organisations that provide this api'
          type: array
          items:
            $ref: '#/components/schemas/Organisation-write'
    'API:jsonld-read':
      type: object
      description: 'An API.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        id:
          readOnly: true
          description: 'The UUID identifier of this object'
          externalDocs:
            url: 'http://schema.org/identifier'
          type: string
        name:
          description: 'The name of this API'
          type: string
        description:
          description: 'An short description of this API'
          externalDocs:
            url: 'https://schema.org/description'
          type: string
        version:
          description: 'The current production version of this component'
          type: string
        logo:
          description: 'The logo for this component'
          externalDocs:
            url: 'https://schema.org/logo'
          type: string
        slug:
          description: 'The slug for this api'
          type: string
        endpoint:
          description: 'The location where api calls should be directed to'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        documentation:
          description: 'The location of the open api documentation of this api'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        component:
          description: 'The common ground component that this api provides'
          $ref: '#/components/schemas/Component:jsonld-read'
        organisations:
          description: 'The organisations that provide this api'
          type: array
          items:
            $ref: '#/components/schemas/Organisation:jsonld-read'
      required:
        - name
        - endpoint
    'API:jsonld-write':
      type: object
      description: 'An API.'
      required:
        - name
        - endpoint
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        name:
          description: 'The name of this API'
          type: string
        description:
          description: 'An short description of this API'
          externalDocs:
            url: 'https://schema.org/description'
          type: string
        version:
          description: 'The current production version of this component'
          type: string
        logo:
          description: 'The logo for this component'
          externalDocs:
            url: 'https://schema.org/logo'
          type: string
        slug:
          description: 'The slug for this api'
          type: string
        endpoint:
          description: 'The location where api calls should be directed to'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        documentation:
          description: 'The location of the open api documentation of this api'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        component:
          description: 'The common ground component that this api provides'
          $ref: '#/components/schemas/Component:jsonld-write'
        organisations:
          description: 'The organisations that provide this api'
          type: array
          items:
            $ref: '#/components/schemas/Organisation:jsonld-write'
    Component-read:
      type: object
      description: 'A Component.'
      properties:
        id:
          readOnly: true
          description: 'The UUID identifier of this object'
          externalDocs:
            url: 'http://schema.org/identifier'
          type: string
        name:
          description: 'The name of this component'
          type: string
        summary:
          description: 'An short description of this component'
          type: string
        description:
          description: 'An short description of this component'
          type: string
        logo:
          description: 'The logo for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        version:
          description: 'The current production version of this component'
          type: string
        slug:
          description: 'The slug for this component'
          type: string
        git:
          description: 'The link to the git repository for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        gitId:
          description: 'The git id for the repository for this component'
          type: string
        gitType:
          description: 'The git type for the repository for this component'
          type: string
        apis:
          description: 'The APIs provided by this component'
          type: array
          items:
            $ref: '#/components/schemas/API-read'
        organisations:
          description: 'The organisations that provide this component'
          type: array
          items:
            $ref: '#/components/schemas/Organisation-read'
        oas:
          description: 'The OAS (formely swagger) documentation for this component'
          type: array
          items:
            type: string
        publiccode:
          description: 'The publiccode documentation for this component'
          type: array
          items:
            type: string
        files:
          description: 'v The organisations that provide this component'
          type: array
          items:
            $ref: '#/components/schemas/ComponentFile-read'
        commonground:
          description: 'Whether tis component is intended for commonground'
          type: boolean
        checked:
          description: 'The moment this component was last checked for commonground compliance'
          type: string
          format: date-time
        parsed:
          description: 'The moment this component was last parsed for file'
          type: string
          format: date-time
        createdAt:
          description: 'The moment this component was found by the crawler'
          type: string
          format: date-time
        updatedAt:
          description: 'The last time this component was changed'
          type: string
          format: date-time
        updatedExternal:
          description: 'The last time this components git was changed on the git provider'
          type: string
          format: date-time
      required:
        - name
        - git
    Component-write:
      type: object
      description: 'A Component.'
      required:
        - name
        - git
      properties:
        name:
          description: 'The name of this component'
          type: string
        summary:
          description: 'An short description of this component'
          type: string
        description:
          description: 'An short description of this component'
          type: string
        logo:
          description: 'The logo for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        version:
          description: 'The current production version of this component'
          type: string
        slug:
          description: 'The slug for this component'
          type: string
        git:
          description: 'The link to the git repository for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        gitId:
          description: 'The git id for the repository for this component'
          type: string
        gitType:
          description: 'The git type for the repository for this component'
          type: string
        apis:
          description: 'The APIs provided by this component'
          type: array
          items:
            $ref: '#/components/schemas/API-write'
        organisations:
          description: 'The organisations that provide this component'
          type: array
          items:
            $ref: '#/components/schemas/Organisation-write'
        oas:
          description: 'The OAS (formely swagger) documentation for this component'
          type: array
          items:
            type: string
        publiccode:
          description: 'The publiccode documentation for this component'
          type: array
          items:
            type: string
        files:
          description: 'v The organisations that provide this component'
          type: array
          items:
            $ref: '#/components/schemas/ComponentFile-write'
        commonground:
          description: 'Whether tis component is intended for commonground'
          type: boolean
        checked:
          description: 'The moment this component was last checked for commonground compliance'
          type: string
          format: date-time
        parsed:
          description: 'The moment this component was last parsed for file'
          type: string
          format: date-time
        createdAt:
          description: 'The moment this component was found by the crawler'
          type: string
          format: date-time
        updatedAt:
          description: 'The last time this component was changed'
          type: string
          format: date-time
        updatedExternal:
          description: 'The last time this components git was changed on the git provider'
          type: string
          format: date-time
    'Component:jsonld-read':
      type: object
      description: 'A Component.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        id:
          readOnly: true
          description: 'The UUID identifier of this object'
          externalDocs:
            url: 'http://schema.org/identifier'
          type: string
        name:
          description: 'The name of this component'
          type: string
        summary:
          description: 'An short description of this component'
          type: string
        description:
          description: 'An short description of this component'
          type: string
        logo:
          description: 'The logo for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        version:
          description: 'The current production version of this component'
          type: string
        slug:
          description: 'The slug for this component'
          type: string
        git:
          description: 'The link to the git repository for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        gitId:
          description: 'The git id for the repository for this component'
          type: string
        gitType:
          description: 'The git type for the repository for this component'
          type: string
        apis:
          description: 'The APIs provided by this component'
          type: array
          items:
            $ref: '#/components/schemas/API:jsonld-read'
        organisations:
          description: 'The organisations that provide this component'
          type: array
          items:
            $ref: '#/components/schemas/Organisation:jsonld-read'
        oas:
          description: 'The OAS (formely swagger) documentation for this component'
          type: array
          items:
            type: string
        publiccode:
          description: 'The publiccode documentation for this component'
          type: array
          items:
            type: string
        files:
          description: 'v The organisations that provide this component'
          type: array
          items:
            $ref: '#/components/schemas/ComponentFile:jsonld-read'
        commonground:
          description: 'Whether tis component is intended for commonground'
          type: boolean
        checked:
          description: 'The moment this component was last checked for commonground compliance'
          type: string
          format: date-time
        parsed:
          description: 'The moment this component was last parsed for file'
          type: string
          format: date-time
        createdAt:
          description: 'The moment this component was found by the crawler'
          type: string
          format: date-time
        updatedAt:
          description: 'The last time this component was changed'
          type: string
          format: date-time
        updatedExternal:
          description: 'The last time this components git was changed on the git provider'
          type: string
          format: date-time
      required:
        - name
        - git
    'Component:jsonld-write':
      type: object
      description: 'A Component.'
      required:
        - name
        - git
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        name:
          description: 'The name of this component'
          type: string
        summary:
          description: 'An short description of this component'
          type: string
        description:
          description: 'An short description of this component'
          type: string
        logo:
          description: 'The logo for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        version:
          description: 'The current production version of this component'
          type: string
        slug:
          description: 'The slug for this component'
          type: string
        git:
          description: 'The link to the git repository for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        gitId:
          description: 'The git id for the repository for this component'
          type: string
        gitType:
          description: 'The git type for the repository for this component'
          type: string
        apis:
          description: 'The APIs provided by this component'
          type: array
          items:
            $ref: '#/components/schemas/API:jsonld-write'
        organisations:
          description: 'The organisations that provide this component'
          type: array
          items:
            $ref: '#/components/schemas/Organisation:jsonld-write'
        oas:
          description: 'The OAS (formely swagger) documentation for this component'
          type: array
          items:
            type: string
        publiccode:
          description: 'The publiccode documentation for this component'
          type: array
          items:
            type: string
        files:
          description: 'v The organisations that provide this component'
          type: array
          items:
            $ref: '#/components/schemas/ComponentFile:jsonld-write'
        commonground:
          description: 'Whether tis component is intended for commonground'
          type: boolean
        checked:
          description: 'The moment this component was last checked for commonground compliance'
          type: string
          format: date-time
        parsed:
          description: 'The moment this component was last parsed for file'
          type: string
          format: date-time
        createdAt:
          description: 'The moment this component was found by the crawler'
          type: string
          format: date-time
        updatedAt:
          description: 'The last time this component was changed'
          type: string
          format: date-time
        updatedExternal:
          description: 'The last time this components git was changed on the git provider'
          type: string
          format: date-time
    ComponentFile-read:
      type: object
      description: 'A Component file.'
      properties:
        id:
          readOnly: true
          description: 'The UUID identifier of this object'
          externalDocs:
            url: 'http://schema.org/identifier'
          type: string
        name:
          description: 'The name of this resource'
          type: string
        type:
          description: 'The type of this resource'
          type: string
        location:
          description: 'The location of this resource'
          type: string
        sha:
          description: 'The sha of this resource'
          type: string
        extention:
          description: 'The extension of this resource'
          type: string
        content:
          description: 'The raw content of this resource'
          type: string
        html:
          description: 'The html content of this resource'
          type: string
        contentUpdated:
          readOnly: true
          description: 'The moment the content of this file was last updated by te crawler'
          type: string
          format: date-time
        htmlUpdated:
          readOnly: true
          description: 'The moment the html of this file was last updated by te crawler'
          type: string
          format: date-time
        createdAt:
          readOnly: true
          description: 'The moment this component was found by the crawler'
          type: string
          format: date-time
        updatedAt:
          readOnly: true
          description: 'The last time this component was changed'
          type: string
          format: date-time
    ComponentFile-write:
      type: object
      description: 'A Component file.'
      properties:
        name:
          description: 'The name of this resource'
          type: string
        type:
          description: 'The type of this resource'
          type: string
        location:
          description: 'The location of this resource'
          type: string
        sha:
          description: 'The sha of this resource'
          type: string
        extention:
          description: 'The extension of this resource'
          type: string
        content:
          description: 'The raw content of this resource'
          type: string
        html:
          description: 'The html content of this resource'
          type: string
    'ComponentFile:jsonld-read':
      type: object
      description: 'A Component file.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        id:
          readOnly: true
          description: 'The UUID identifier of this object'
          externalDocs:
            url: 'http://schema.org/identifier'
          type: string
        name:
          description: 'The name of this resource'
          type: string
        type:
          description: 'The type of this resource'
          type: string
        location:
          description: 'The location of this resource'
          type: string
        sha:
          description: 'The sha of this resource'
          type: string
        extention:
          description: 'The extension of this resource'
          type: string
        content:
          description: 'The raw content of this resource'
          type: string
        html:
          description: 'The html content of this resource'
          type: string
        contentUpdated:
          readOnly: true
          description: 'The moment the content of this file was last updated by te crawler'
          type: string
          format: date-time
        htmlUpdated:
          readOnly: true
          description: 'The moment the html of this file was last updated by te crawler'
          type: string
          format: date-time
        createdAt:
          readOnly: true
          description: 'The moment this component was found by the crawler'
          type: string
          format: date-time
        updatedAt:
          readOnly: true
          description: 'The last time this component was changed'
          type: string
          format: date-time
    'ComponentFile:jsonld-write':
      type: object
      description: 'A Component file.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        name:
          description: 'The name of this resource'
          type: string
        type:
          description: 'The type of this resource'
          type: string
        location:
          description: 'The location of this resource'
          type: string
        sha:
          description: 'The sha of this resource'
          type: string
        extention:
          description: 'The extension of this resource'
          type: string
        content:
          description: 'The raw content of this resource'
          type: string
        html:
          description: 'The html content of this resource'
          type: string
    ExampleEntity-read:
      type: object
      description: 'This is an example entity.'
      properties:
        id:
          readOnly: true
          externalDocs:
            url: 'http://schema.org/identifier'
          type: string
        name:
          description: 'The name of this example property'
          type: string
        description:
          description: 'The description of this example property'
          type: string
        camelCase:
          description: 'Proof that we camel case our api'
          type: string
      required:
        - name
    ExampleEntity-write:
      type: object
      description: 'This is an example entity.'
      required:
        - name
      properties:
        name:
          description: 'The name of this example property'
          type: string
        description:
          description: 'The description of this example property'
          type: string
        camelCase:
          description: 'Proof that we camel case our api'
          type: string
    'ExampleEntity:jsonld-read':
      type: object
      description: 'This is an example entity.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        id:
          readOnly: true
          externalDocs:
            url: 'http://schema.org/identifier'
          type: string
        name:
          description: 'The name of this example property'
          type: string
        description:
          description: 'The description of this example property'
          type: string
        camelCase:
          description: 'Proof that we camel case our api'
          type: string
      required:
        - name
    'ExampleEntity:jsonld-write':
      type: object
      description: 'This is an example entity.'
      required:
        - name
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        name:
          description: 'The name of this example property'
          type: string
        description:
          description: 'The description of this example property'
          type: string
        camelCase:
          description: 'Proof that we camel case our api'
          type: string
    Organisation-read:
      type: object
      description: 'An Organisation.'
      properties:
        id:
          readOnly: true
          description: 'The UUID identifier of this object'
          externalDocs:
            url: 'http://schema.org/identifier'
          type: string
        name:
          description: 'The name of this organisation'
          type: string
        description:
          description: 'An short description of this organisation'
          type: string
        logo:
          description: 'The logo for this organisation'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        slug:
          description: 'The slug for this organisation'
          type: string
        git:
          description: 'The link to the git repository for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        gitId:
          description: 'The git id for the repository for this component'
          type: string
        components:
          description: 'The apis provided by this organisation'
          type: array
          items:
            $ref: '#/components/schemas/Component-read'
        apis:
          description: 'The components provided by this organisation'
          type: array
          items:
            $ref: '#/components/schemas/API-read'
      required:
        - name
        - git
    Organisation-write:
      type: object
      description: 'An Organisation.'
      required:
        - name
        - git
      properties:
        name:
          description: 'The name of this organisation'
          type: string
        description:
          description: 'An short description of this organisation'
          type: string
        logo:
          description: 'The logo for this organisation'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        slug:
          description: 'The slug for this organisation'
          type: string
        git:
          description: 'The link to the git repository for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        gitId:
          description: 'The git id for the repository for this component'
          type: string
        components:
          description: 'The apis provided by this organisation'
          type: array
          items:
            $ref: '#/components/schemas/Component-write'
        apis:
          description: 'The components provided by this organisation'
          type: array
          items:
            $ref: '#/components/schemas/API-write'
    'Organisation:jsonld-read':
      type: object
      description: 'An Organisation.'
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        id:
          readOnly: true
          description: 'The UUID identifier of this object'
          externalDocs:
            url: 'http://schema.org/identifier'
          type: string
        name:
          description: 'The name of this organisation'
          type: string
        description:
          description: 'An short description of this organisation'
          type: string
        logo:
          description: 'The logo for this organisation'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        slug:
          description: 'The slug for this organisation'
          type: string
        git:
          description: 'The link to the git repository for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        gitId:
          description: 'The git id for the repository for this component'
          type: string
        components:
          description: 'The apis provided by this organisation'
          type: array
          items:
            $ref: '#/components/schemas/Component:jsonld-read'
        apis:
          description: 'The components provided by this organisation'
          type: array
          items:
            $ref: '#/components/schemas/API:jsonld-read'
      required:
        - name
        - git
    'Organisation:jsonld-write':
      type: object
      description: 'An Organisation.'
      required:
        - name
        - git
      properties:
        '@context':
          readOnly: true
          type: string
        '@id':
          readOnly: true
          type: string
        '@type':
          readOnly: true
          type: string
        name:
          description: 'The name of this organisation'
          type: string
        description:
          description: 'An short description of this organisation'
          type: string
        logo:
          description: 'The logo for this organisation'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        slug:
          description: 'The slug for this organisation'
          type: string
        git:
          description: 'The link to the git repository for this component'
          externalDocs:
            url: 'http://schema.org/url'
          type: string
        gitId:
          description: 'The git id for the repository for this component'
          type: string
        components:
          description: 'The apis provided by this organisation'
          type: array
          items:
            $ref: '#/components/schemas/Component:jsonld-write'
        apis:
          description: 'The components provided by this organisation'
          type: array
          items:
            $ref: '#/components/schemas/API:jsonld-write'
definitions:
  API-read:
    properties:
      id:
        example: e2984465-190a-4562-829e-a8cca81aa35d
        format: uuid
      name:
        maxLength: 255
      description:
        example: 'This is the best API ever'
        maxLength: 2550
      version:
        example: v0.1.2.3-beta
        maxLength: 255
      logo:
        example: 'https://www.my-organisation.com/logo.png'
        format: url
        maxLength: 255
      slug:
        example: my-organisation
        maxLength: 255
      endpoint:
        example: 'https://api.my-organisation.com'
        format: url
        maxLength: 255
      documentation:
        example: 'https://api.my-organisation.com/docs'
        format: url
        maxLength: 255
      component: []
      organisations: []
    required:
      - name
      - endpoint
  API-write:
    properties:
      name:
        maxLength: 255
      description:
        example: 'This is the best API ever'
        maxLength: 2550
      version:
        example: v0.1.2.3-beta
        maxLength: 255
      logo:
        example: 'https://www.my-organisation.com/logo.png'
        format: url
        maxLength: 255
      slug:
        example: my-organisation
        maxLength: 255
      endpoint:
        example: 'https://api.my-organisation.com'
        format: url
        maxLength: 255
      documentation:
        example: 'https://api.my-organisation.com/docs'
        format: url
        maxLength: 255
      component: []
      organisations: []
    required:
      - name
      - endpoint
  Component-read:
    properties:
      id:
        example: e2984465-190a-4562-829e-a8cca81aa35d
        format: uuid
      name:
        example: 'My component'
        maxLength: 255
      summary:
        example: 'This is the best component ever'
        maxLength: 2550
      description:
        example: 'This is the best component ever'
        maxLength: 2550
      logo:
        example: 'https://www.my-organisation.com/logo.png'
        format: url
        maxLength: 255
      version:
        example: v0.1.2.3-beta
        maxLength: 255
      slug:
        example: my-organisation
        maxLength: 255
      git:
        example: 'https://www.github.com/my-organisation/my-component.git'
        format: url
        maxLength: 255
      gitId:
        example: my-component
        maxLength: 255
      gitType:
        example: '({"Github", "Gitlab", "Bitbucket"})'
        maxLength: 255
      oas: []
      publiccode: []
      commonground: []
      checked: []
      parsed: []
      createdAt: []
      updatedAt: []
      updatedExternal: []
      apis: []
      organisations: []
      files: []
    required:
      - name
      - git
  Component-write:
    properties:
      name:
        example: 'My component'
        maxLength: 255
      summary:
        example: 'This is the best component ever'
        maxLength: 2550
      description:
        example: 'This is the best component ever'
        maxLength: 2550
      logo:
        example: 'https://www.my-organisation.com/logo.png'
        format: url
        maxLength: 255
      version:
        example: v0.1.2.3-beta
        maxLength: 255
      slug:
        example: my-organisation
        maxLength: 255
      git:
        example: 'https://www.github.com/my-organisation/my-component.git'
        format: url
        maxLength: 255
      gitId:
        example: my-component
        maxLength: 255
      gitType:
        example: '({"Github", "Gitlab", "Bitbucket"})'
        maxLength: 255
      oas: []
      publiccode: []
      commonground: []
      checked: []
      parsed: []
      createdAt: []
      updatedAt: []
      updatedExternal: []
      apis: []
      organisations: []
      files: []
    required:
      - name
      - git
  ComponentFile-read:
    properties:
      id:
        example: e2984465-190a-4562-829e-a8cca81aa35d
        format: uuid
      name:
        example: 'My component file'
      type:
        example: 'My type'
      location:
        example: 'https://github.com/repos/ConductionNL/Commongrounregistratiecomponent/contents/README.md?ref=master'
      sha: []
      extention:
        example: md
      content: []
      html: []
      contentUpdated: []
      htmlUpdated: []
      createdAt: []
      updatedAt: []
    required: []
  ComponentFile-write:
    properties:
      name:
        example: 'My component file'
      type:
        example: 'My type'
      location:
        example: 'https://github.com/repos/ConductionNL/Commongrounregistratiecomponent/contents/README.md?ref=master'
      sha: []
      extention:
        example: md
      content: []
      html: []
    required: []
  ExampleEntity-read:
    properties:
      id:
        example: e2984465-190a-4562-829e-a8cca81aa35d
        format: uuid
      name:
        example: 'My Group'
        maxLength: 255
      description:
        example: 'Is the best group ever'
        maxLength: 2555
      camelCase:
        example: 'Best api ever'
        maxLength: 255
    required:
      - name
  ExampleEntity-write:
    properties:
      name:
        example: 'My Group'
        maxLength: 255
      description:
        example: 'Is the best group ever'
        maxLength: 2555
      camelCase:
        example: 'Best api ever'
        maxLength: 255
    required:
      - name
  Organisation-read:
    properties:
      id:
        example: e2984465-190a-4562-829e-a8cca81aa35d
        format: uuid
      name:
        example: 'My Organisation'
        maxLength: 255
      description:
        example: 'This is the best organisation ever'
        maxLength: 2550
      logo:
        example: 'https://www.my-organisation.com/logo.png'
        format: url
        maxLength: 255
      slug:
        example: my-organisation
      git:
        example: 'https://www.github.com/my-organisation/my-component.git'
        format: url
        maxLength: 255
      gitId:
        example: my-component
        maxLength: 255
      components: []
      apis: []
    required:
      - name
      - git
  Organisation-write:
    properties:
      name:
        example: 'My Organisation'
        maxLength: 255
      description:
        example: 'This is the best organisation ever'
        maxLength: 2550
      logo:
        example: 'https://www.my-organisation.com/logo.png'
        format: url
        maxLength: 255
      slug:
        example: my-organisation
      git:
        example: 'https://www.github.com/my-organisation/my-component.git'
        format: url
        maxLength: 255
      gitId:
        example: my-component
        maxLength: 255
      components: []
      apis: []
    required:
      - name
      - git
tags:
  -
    name: API
    description: |
      An API.
      
      
  -
    name: Component
    description: |
      A Component.
      
      
  -
    name: ComponentFile
    description: |
      A Component file.
      
      
  -
    name: ExampleEntity
    description: |
      This is an example entity.
      
      With an adtional description, all in all its pritty nice [url](www.google.nl)
  -
    name: Organisation
    description: |
      An Organisation.
      
      
securityDefinitions:
  JWT-Oauth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'
    flow: implicit
    scopes:
      read: 'read right to the Organisation resource'
      write: 'write right to the Organisation resource'
  JWT-Token:
    type: apiKey
    in: header
    name: Authorization
    scopes:
      read: 'read right to the Organisation resource'
      write: 'write right to the Organisation resource'
host: irc.zaakonline.nl
servers:
  -
    description: 'Demo Omgeving'
    url: 'http://proto.demo.common-ground.dev'
externalDocs:
  -
    description: 'OAS Documentatie'
    url: 'http://proto.demo.common-ground.dev'
x-commonground:
  type: service
  developers:
    -
      name: Conduction
      url: 'https://github.com/ConductionNL'
      email: info@conduction.nl
    -
      name: 'Gemeente ''s-Hertogenbosch'
      url: 'https://github.com/gemeenteshertogenbosch'
      email: info@s-hertogenbosch.nl/
    -
      name: 'Gemeente Utrecht'
      url: 'https://github.com/GemeenteUtrecht'
      email: info@utrecht.nl
  builds:
    -
      name: travis
      logo: 'https://travis-ci.org/api-platform/core.svg?branch=master'
      url: 'https://travis-ci.org/api-platform/core'
    -
      name: appveyor
      logo: 'https://ci.appveyor.com/api/projects/status/grwuyprts3wdqx5l?svg=true'
      url: 'https://ci.appveyor.com/project/dunglas/dunglasapibundle'
    -
      name: codecov
      logo: 'https://codecov.io/gh/api-platform/core/branch/master/graph/badge.svg'
      url: 'https://codecov.io/gh/api-platform/core'
    -
      name: SensioLabsInsight
      logo: 'https://insight.sensiolabs.com/projects/92d78899-946c-4282-89a3-ac92344f9a93/mini.png'
      url: 'https://insight.sensiolabs.com/projects/92d78899-946c-4282-89a3-ac92344f9a93'
    -
      name: 'Scrutinizer Code Quality'
      logo: 'https://scrutinizer-ci.com/g/api-platform/core/badges/quality-score.png?b=master'
      url: 'https://scrutinizer-ci.com/g/api-platform/core/?branch=master'
